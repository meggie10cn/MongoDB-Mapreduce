{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset0 AndaleMono;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red47\green255\blue18;\red41\green0\blue130;\red0\green31\blue103;
\red32\green0\blue99;\red0\green45\blue153;\red26\green26\blue26;\red242\green244\blue245;\red83\green83\blue83;
\red50\green91\blue142;}
\margl1440\margr1440\vieww19900\viewh15620\viewkind0
\deftab720
\pard\pardeftab720\ri2460\qj

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
Name: Lixia Zhao\
HW: #6\
Course: CSC 626\
Due: 5/4/2015\
\
\

\fs28 \ul a)
\f1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 
\f0 \expnd0\expndtw0\kerning0
Find the total number of cities in the database.\

\fs24 \ulnone \
\pard\pardeftab720\ri2460\qj

\fs28 \cf0 \expnd0\expndtw0\kerning0
This question may have two interpretations: \
\
  a1) each records with \'93city\'94 field has a city: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f2 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0  \cf3 db.zipcodes.find(\{city:\{$exists:true\}\}).count();\
 \cf0 Answer: 29353\
\
 a2) distinct city by the name of city\
 \cf4 db.zipcodes.distinct(\'93city\'94).length;\
 \cf0 Answer:16584
\f1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \

\f1\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\li71\fi-34\ri-570\qj

\f0\fs28 \cf0 \expnd0\expndtw0\kerning0
\ul \ulc0 b)
\f1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 
\f0 \expnd0\expndtw0\kerning0
Create the list of states, cities, and  populations. 
\f1\fs24 \expnd0\expndtw0\kerning0
\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f2\fs28 \cf0 \kerning1\expnd0\expndtw0 \CocoaLigature0  \cf5 db.zipcodes.find(\{\},\{state:1, city: 1, pop: 1, _id: 0\});\cf0 \
   (only list states, cities and pops)\
\
\pard\pardeftab720\li116\fi-101\ri-3445\qj

\f0 \cf0 \expnd0\expndtw0\kerning0
\ul \CocoaLigature1 c)
\f1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 
\f0 \expnd0\expndtw0\kerning0
List the cities in the state of Massachusetts with  populations between 1000 and 2000.
\f2 \kerning1\expnd0\expndtw0 \ulnone \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf0  \cf5 db.zipcodes.find( \{ state: 'MA', pop: \{ $gte: 1000, $lte: 2000 \}\},\{ city: 1, _id: 0\} );\
     \cf0 (only list the name of the cities meet the criteria)\
\
  count: \
 \cf4 db.zipcodes.find( \{ state: 'MA', pop: \{ $gte: 1000, $lte: 2000 \}\} ).count();\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf1 3\cf0 Answer: 33\
or: \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf5 db.zipcodes.find( \{ state: 'MA', pop: \{ $gte: 1000, $lte: 2000 \}\} );\cf0 \
 (list all the information of the cities meet the criteria)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f1 \cf0 \expnd0\expndtw0\kerning0
\ul \CocoaLigature1 \
\
\pard\tx40\pardeftab720\fi38\ri-3052\qj

\f0 \cf0 \expnd0\expndtw0\kerning0
d)
\f1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 
\f0 \expnd0\expndtw0\kerning0
Write a mapReducer to compute the total number of cities and total population in each state.
\fs24 \expnd0\expndtw0\kerning0
\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f2\fs28 \cf0 \kerning1\expnd0\expndtw0 \CocoaLigature0 var map_pop = function()\
         \{ var key = this.state; var value = \{count:1, pop:this.pop\};\
           emit(key,value);\};\
\
var reduce_pop_city = function(key,values) \
          \{ reducedVal =\{count:0, pop:0\}; \
           for (var idx = 0; idx<values.length; idx++) \
           \{ reducedVal.count += values[idx].count; \
             reducedVal.pop += values[idx].pop;\} \
             return reducedVal;\};\
     \
var total_city_pop = db.zipcodes.mapReduce\
          (map_pop,reduce_pop_city,\{out:"cities_pop\'94\});\
\
total_city_pop\
db[total_city_pop.result].find();
\f0\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f2\fs28 \cf4 \kerning1\expnd0\expndtw0 \CocoaLigature0 (Note: count is the total number of cities, \
pop is the total number of population of each state)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf0 \
\pard\pardeftab720\li72\fi-73\ri2460\qj

\f0 \cf0 \expnd0\expndtw0\kerning0
\ul \CocoaLigature1 Extra credit.
\f1 \expnd0\expndtw0\kerning0
\

\f0 \expnd0\expndtw0\kerning0
a)
\f1 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0 
\f0 \expnd0\expndtw0\kerning0
Write a mapReducer to find the average city population for each state.
\f1 \expnd0\expndtw0\kerning0
\ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f2 \cf4 \kerning1\expnd0\expndtw0 \CocoaLigature0 Note: use the same map and reduce functions used for question (d), \
     and a finalizedFunction added: \cf0 \
\
var map_pop = function()\
               \{ var key = this.state; var value = \
                   \{count:1, pop:this.pop\};\
                    emit(key,value);\};\
\
var reduce_pop_city = function(key,values) \
               \{ reducedVal =\{count:0, pop:0\}; \
               for (var idx = 0; idx<values.length; idx++) \
                \{ reducedVal.count+= values[idx].count; \
                  reducedVal.pop += values[idx].pop;\} \
                  return reducedVal;\}; \
\
var finalizedFunction = function(key,reducedVal)\
                       \{reducedVal.avg = \
                            Math.round(reducedVal.pop/reducedVal.cities);\
                            return reducedVal;\};\
var ave_pop = db.zipcodes.mapReduce\
                        (map_pop,reduce_pop_city,\
                           \{out:"ave_pop",finalize: finalizedFunction\});\
ave_pop\
db[ave_pop.result].find();\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf6 (note will list the average city population for each state)\
\cf0 \ul \
b)
\f0 \expnd0\expndtw0\kerning0
\CocoaLigature1 Write a mapReducer to find the least densely-populated state(s).\
\ulnone \
\cf6 Use the same mapReduce in extra a, add sort and limit query to get the least city population state:\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f2 \cf0 \kerning1\expnd0\expndtw0 \CocoaLigature0 db[ave_pop.result].find().sort(\{"value.avg":1\}).limit(1)\
\
Answer: _id" : "ND", "value" : \{ "count" : 391, "pop" : 638272, "avg" : 1632 \} \
*********************************************************************************
\f1\fs24 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f2\fs28 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
Alternative resolution for extra a)\
\pard\pardeftab720\sl480

\f3 \cf7 \cb8 \expnd0\expndtw0\kerning0
\CocoaLigature1 db.zipcodes.aggregate( [\
   \{ $group\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \{ _id\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \{ state\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
"$state"\cf7 \expnd0\expndtw0\kerning0
, city\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
"$city"\cf7 \expnd0\expndtw0\kerning0
 \}, pop\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \{ $sum\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
"$pop"\cf7 \expnd0\expndtw0\kerning0
 \} \} \},\
   \{ $group\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \{ _id\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
"$_id.state"\cf7 \expnd0\expndtw0\kerning0
, avgCityPop\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \{ $avg\cf9 \expnd0\expndtw0\kerning0
:\cf7 \expnd0\expndtw0\kerning0
 \cf10 \expnd0\expndtw0\kerning0
"$pop"\cf7 \expnd0\expndtw0\kerning0
 \} \} \}\
] )\
\
}